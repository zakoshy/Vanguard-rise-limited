/**
 * @file Firestore Security Rules
 * @description This ruleset enforces role-based access control, primarily for administrative users.
 *
 * Core Philosophy:
 *  - Access to key data collections (investment projects, real estate listings, philanthropic activities, and project management success stories) is restricted to users with the 'admin' role.
 *  - User documents can only be created by the user themselves.
 *
 * Data Structure:
 *  - Top-level collections: /investment_projects, /real_estate_listings, /philanthropic_activities, /project_management_success_stories, /users, /roles_admin
 *  - User data is stored in /users/{userId}
 *  - Admin roles are granted by the existence of a document in /roles_admin/{userId}
 *
 * Key Security Decisions:
 *  - Only admins can create, update, or delete investment projects, real estate listings, philanthropic activities and project management success stories.
 *  - Users can only create their own user document. Listing all users is not permitted.
 *
 *  Denormalization for Authorization:
 *   - The rules rely on checking for the existence of an admin role document in the `/roles_admin/{userId}` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user's ID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is signed in and their UID matches the userId, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user exists and is the owner.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the resource exists and the signed-in user's UID matches the userId.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user has the 'admin' role.
     * @returns {boolean} True if the user has the admin role, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for project management success stories. Only admins can create, read, update, or delete.
     * @path /project_management_success_stories/{projectManagementSuccessStoryId}
     * @allow (create) - An admin can create a new success story.
     * @allow (get) - Any user can read a success story.
     * @deny (create) - A non-admin user cannot create a new success story.
     * @principle Enforces admin-only access for modifying success stories.
     */
    match /project_management_success_stories/{projectManagementSuccessStoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for investment projects. Only admins can create, read, update, or delete.
     * @path /investment_projects/{investmentProjectId}
     * @allow (create) - An admin can create a new investment project.
     * @allow (get) - Any user can read an investment project.
     * @deny (create) - A non-admin user cannot create a new investment project.
     * @principle Enforces admin-only access for modifying investment projects.
     */
    match /investment_projects/{investmentProjectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for real estate listings. Only admins can create, read, update, or delete.
     * @path /real_estate_listings/{realEstateListingId}
     * @allow (create) - An admin can create a new real estate listing.
     * @allow (get) - Any user can read a real estate listing.
     * @deny (create) - A non-admin user cannot create a new real estate listing.
     * @principle Enforces admin-only access for modifying real estate listings.
     */
    match /real_estate_listings/{realEstateListingId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for philanthropic activities. Only admins can create, read, update, or delete.
     * @path /philanthropic_activities/{philanthropicActivityId}
     * @allow (create) - An admin can create a new philanthropic activity.
     * @allow (get) - Any user can read a philanthropic activity.
     * @deny (create) - A non-admin user cannot create a new philanthropic activity.
     * @principle Enforces admin-only access for modifying philanthropic activities.
     */
    match /philanthropic_activities/{philanthropicActivityId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile. The userId must match the authenticated user's ID.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (get) - No one can read another user's data.
     * @principle Enforces user-ownership for profile creation and restricts listing.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for admin roles. Only admins can create, update, or delete admin roles.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }
  }
}