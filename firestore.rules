/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, primarily focused on admin-only access for core content collections
 * and user-specific ownership for user profiles.
 *
 * Data Structure:
 * - `/project_management_success_stories/{projectManagementSuccessStoryId}`: Stores project management success stories. Admin-only access.
 * - `/investment_projects/{investmentProjectId}`: Stores investment projects. Admin-only access.
 * - `/real_estate_listings/{realEstateListingId}`: Stores real estate listings. Admin-only access.
 * - `/philanthropic_activities/{philanthropicActivityId}`: Stores philanthropic activities. Admin-only access.
 * - `/users/{userId}`: Stores user profile information. User-owned with self-creation allowed.
 *
 * Key Security Decisions:
 * - Admin Role:  All `*_success_stories`, `investment_projects`, `real_estate_listings`, and `philanthropic_activities` collections
 *   are strictly limited to admin users for all operations.
 * - User Listing Disallowed: The `users` collection is not listable, only accessible by the individual user.
 * - Admin role is defined inside the document, at `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Requires the user to be authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces user-specific data access.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user exists and is the owner.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Combines ownership and existence checks for safety.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }
    /**
     * @description Checks if the user is an administrator.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @principle Requires the user to have the `isAdmin` field set to `true` in their user document.
     */
    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    /**
     * @description Rules for project management success stories.
     * @path /project_management_success_stories/{projectManagementSuccessStoryId}
     */
    match /project_management_success_stories/{projectManagementSuccessStoryId} {
        allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for investment projects.
     * @path /investment_projects/{investmentProjectId}
     */
    match /investment_projects/{investmentProjectId} {
        allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for real estate listings.
     * @path /real_estate_listings/{realEstateListingId}
     */
    match /real_estate_listings/{realEstateListingId} {
        allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for philanthropic activities.
     * @path /philanthropic_activities/{philanthropicActivityId}
     */
    match /philanthropic_activities/{philanthropicActivityId} {
        allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}