/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, primarily focused on administrative privileges.
 * Collections like project_management_success_stories, investment_projects, real_estate_listings,
 * and philanthropic_activities are secured to only allow administrators to create, read, update, or delete documents.
 * User-specific data under /users/{userId} is protected with owner-only access.
 *
 * Data Structure:
 * The Firestore database is organized into top-level collections for different types of content:
 * - /project_management_success_stories: Success stories for project management.
 * - /investment_projects: Investment project details.
 * - /real_estate_listings: Real estate property listings.
 * - /philanthropic_activities: Information on philanthropic activities.
 * - /users: User profiles, with each document ID being the user's UID.
 *
 * Key Security Decisions:
 * - Admin-Only Content Management: Collections like project_management_success_stories, investment_projects,
 *   real_estate_listings, and philanthropic_activities are designed to be managed exclusively by admins.
 *   This means regular users cannot create, update, or delete content in these collections.
 * - User Profile Ownership: Each user has full control over their own profile data under /users/{userId}.
 * - No User Listing: Listing all users is explicitly denied to prevent unauthorized access to user data.
 * - Read-Only Public Collections: Some collections are designed to be publicly readable, but only admins can modify them.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @param {void}
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    /**
     * @description Checks if the request is coming from an authenticated admin.
     * @return {boolean} True if the user has admin privileges, false otherwise.
     */
    function isAuthAdmin() {
        return isSignedIn() && isAdmin();
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the resource data.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Rules for project management success stories. Only admins can create, read, update, or delete.
     * @path /project_management_success_stories/{projectManagementSuccessStoryId}
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @principle Enforces admin-only access for content management.
     */
    match /project_management_success_stories/{projectManagementSuccessStoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAuthAdmin();
      allow update: if isAuthAdmin() && resource != null;
      allow delete: if isAuthAdmin() && resource != null;
    }

    /**
     * @description Rules for investment projects. Only admins can create, read, update, or delete.
     * @path /investment_projects/{investmentProjectId}
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @principle Enforces admin-only access for content management.
     */
    match /investment_projects/{investmentProjectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAuthAdmin();
      allow update: if isAuthAdmin() && resource != null;
      allow delete: if isAuthAdmin() && resource != null;
    }

    /**
     * @description Rules for real estate listings. Only admins can create, read, update, or delete.
     * @path /real_estate_listings/{realEstateListingId}
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @principle Enforces admin-only access for content management.
     */
    match /real_estate_listings/{realEstateListingId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAuthAdmin();
      allow update: if isAuthAdmin() && resource != null;
      allow delete: if isAuthAdmin() && resource != null;
    }

    /**
     * @description Rules for philanthropic activities. Only admins can create, read, update, or delete.
     * @path /philanthropic_activities/{philanthropicActivityId}
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @principle Enforces admin-only access for content management.
     */
    match /philanthropic_activities/{philanthropicActivityId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAuthAdmin();
      allow update: if isAuthAdmin() && resource != null;
      allow delete: if isAuthAdmin() && resource != null;
    }

    /**
     * @description Rules for user profiles. Only the user can read, create, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (create) If the user's UID matches the userId in the path.
     * @deny (create) If the user's UID does not match the userId in the path.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}