/**
 * @file Firebase Security Rules
 * @version 2
 *
 * @description This ruleset enforces a role-based access control system where specific collections
 * are only manageable by users with admin privileges. User documents have basic ownership restrictions.
 *
 * Data Structure:
 * - /project_management_success_stories/{docId}: Success stories.
 * - /investment_projects/{docId}: Investment projects.
 * - /real_estate_listings/{docId}: Real estate listings.
 * - /philanthropic_activities/{docId}: Philanthropic activities.
 * - /roles_admin/{userId}: Admin role assignments.
 * - /users/{userId}: User profile data.
 *
 * Key Security Decisions:
 * - Admin-Only Collections: `project_management_success_stories`, `investment_projects`,
 *   `real_estate_listings`, and `philanthropic_activities` are strictly controlled by admins.
 *   Non-admins have no access.
 * - Admin Role Management: Only existing admins can manage admin roles. Users can read their own
 *   role document to verify their admin status.
 * - User Profiles: Users can only read and write their own profile data.
 * - No User Listing: Listing all users is disallowed for privacy and security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin by verifying
     * the existence of a document in the roles_admin collection.
     */
    function isAdmin() {
      return isSignedIn() &&
             exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the current user id matches the requested id.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows admins to fully manage all admin-controlled collections.
     * @path /project_management_success_stories/{docId}
     * @allow (create) request.auth.uid == adminUserId
     * @deny (create) request.auth.uid == nonAdminUserId
     * @principle Enforces role-based access control; only admins can modify.
     */
    match /project_management_success_stories/{docId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Allows admins to fully manage all admin-controlled collections.
     * @path /investment_projects/{docId}
     * @allow (create) request.auth.uid == adminUserId
     * @deny (create) request.auth.uid == nonAdminUserId
     * @principle Enforces role-based access control; only admins can modify.
     */
    match /investment_projects/{docId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Allows admins to fully manage all admin-controlled collections.
     * @path /real_estate_listings/{docId}
     * @allow (create) request.auth.uid == adminUserId
     * @deny (create) request.auth.uid == nonAdminUserId
     * @principle Enforces role-based access control; only admins can modify.
     */
    match /real_estate_listings/{docId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Allows admins to fully manage all admin-controlled collections.
     * @path /philanthropic_activities/{docId}
     * @allow (create) request.auth.uid == adminUserId
     * @deny (create) request.auth.uid == nonAdminUserId
     * @principle Enforces role-based access control; only admins can modify.
     */
    match /philanthropic_activities/{docId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Admin roles collection.
     * - Allow signed-in users to read *their own* admin role doc,
     *   so your front-end can check if theyâ€™re admin.
     * - Allow existing admins to manage roles (promote/demote others).
     * @path /roles_admin/{userId}
     * @allow (get) request.auth.uid == userId if isSignedIn()
     * @allow (create) request.auth.uid == adminUserId if isAdmin()
     * @deny (create) request.auth.uid == nonAdminUserId
     * @principle Restricts admin role management to existing admins.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list, create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) request.auth.uid == userId && request.resource.data.id == userId
     * @allow (get) request.auth.uid == userId
     * @allow (update) request.auth.uid == userId
     * @deny (update) request.auth.uid != userId
     * @deny (list) always
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if false;
    }
  }
}