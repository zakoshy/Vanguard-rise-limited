/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, primarily for administrative access to key data collections.
 *
 * Data Structure:
 * - /project_management_success_stories/{projectManagementSuccessStoryId}: Stores success stories.
 * - /investment_projects/{investmentProjectId}: Stores investment projects.
 * - /real_estate_listings/{realEstateListingId}: Stores real estate listings.
 * - /philanthropic_activities/{philanthropicActivityId}: Stores philanthropic activities.
 * - /users/{userId}: Stores user profile data; currently only supports a single isAdmin flag.
 *
 * Key Security Decisions:
 * - Admin Role Required: The core security decision is that create, update, and delete operations for project management success stories,
 *   investment projects, real estate listings, and philanthropic activities are restricted to users with the `isAdmin` flag set to true in their user document.
 * - No Public Listing: Listing of any collections other than stories is forbidden.
 * - User Data Ownership: Users can only read/write their own user document.
 *
 * Denormalization for Authorization:
 * - The `isAdmin` flag is denormalized on the user document to avoid additional reads during authorization checks. This allows for simple, performant rules.
 *
 * Structural Segregation:
 * - No structural segregation is used in this ruleset. All collections are top-level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants admin-only access to project management success stories.
     * @path /project_management_success_stories/{projectManagementSuccessStoryId}
     * @allow (create, update, delete) User with isAdmin set to true in their user document can create, update, and delete a story.
     * @deny (create, update, delete) User without isAdmin cannot create, update, or delete a story.
     * @principle Requires admin role for write operations. Allows public read access.
     */
    match /project_management_success_stories/{projectManagementSuccessStoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants admin-only access to investment projects.
     * @path /investment_projects/{investmentProjectId}
     * @allow (create, update, delete) User with isAdmin set to true in their user document can create, update, and delete a project.
     * @deny (create, update, delete) User without isAdmin cannot create, update, or delete a project.
     * @principle Requires admin role for write operations.
     */
    match /investment_projects/{investmentProjectId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants admin-only access to real estate listings.
     * @path /real_estate_listings/{realEstateListingId}
     * @allow (create, update, delete) User with isAdmin set to true in their user document can create, update, and delete a listing.
     * @deny (create, update, delete) User without isAdmin cannot create, update, or delete a listing.
     * @principle Requires admin role for write operations.
     */
    match /real_estate_listings/{realEstateListingId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants admin-only access to philanthropic activities.
     * @path /philanthropic_activities/{philanthropicActivityId}
     * @allow (create, update, delete) User with isAdmin set to true in their user document can create, update, and delete an activity.
     * @deny (create, update, delete) User without isAdmin cannot create, update, or delete an activity.
     * @principle Requires admin role for write operations.
     */
    match /philanthropic_activities/{philanthropicActivityId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to user profiles.  Users can only read/write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) Authenticated user can access their own user document.
     * @allow (create) Authenticated user can create their own user document.
     * @deny (get, update, delete) Authenticated user cannot access another user's document.
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}