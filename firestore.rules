/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, primarily for admin-managed content.
 *
 * Data Structure:
 * - /project_management_success_stories/{projectManagementSuccessStoryId}: Success stories for project management.
 * - /investment_projects/{investmentProjectId}: Investment projects.
 * - /real_estate_listings/{realEstateListingId}: Real estate listings.
 * - /philanthropic_activities/{philanthropicActivityId}: Philanthropic activities.
 * - /users/{userId}: User profile information.
 *
 * Key Security Decisions:
 * - Admin-Only Content: The success stories, investment projects, real estate listings, and philanthropic activities collections are designed to be edited only by admin users.
 * - No Public Listing: To enhance security, listing of success stories, investment projects, real estate listings, and philanthropic activities is explicitly denied.
 * - User Profile Ownership: Users can only read and modify their own profile data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants admin-only access to manage project management success stories.
     * @path /project_management_success_stories/{projectManagementSuccessStoryId}
     * @allow (create, update, delete) - If the user is an admin.
     * @allow (get) - If the user is an admin.
     * @deny (create) - If the user is not an admin.
     * @deny (get) - If the user is not an admin.
     * @principle Enforces admin-only access for content management.
     */
    match /project_management_success_stories/{projectManagementSuccessStoryId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants admin-only access to manage investment projects.
     * @path /investment_projects/{investmentProjectId}
     * @allow (create, update, delete) - If the user is an admin.
     * @allow (get) - If the user is an admin.
     * @deny (create) - If the user is not an admin.
     * @deny (get) - If the user is not an admin.
     * @principle Enforces admin-only access for content management.
     */
    match /investment_projects/{investmentProjectId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants admin-only access to manage real estate listings.
     * @path /real_estate_listings/{realEstateListingId}
     * @allow (create, update, delete) - If the user is an admin.
     * @allow (get) - If the user is an admin.
     * @deny (create) - If the user is not an admin.
     * @deny (get) - If the user is not an admin.
     * @principle Enforces admin-only access for content management.
     */
    match /real_estate_listings/{realEstateListingId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants admin-only access to manage philanthropic activities.
     * @path /philanthropic_activities/{philanthropicActivityId}
     * @allow (create, update, delete) - If the user is an admin.
     * @allow (get) - If the user is an admin.
     * @deny (create) - If the user is not an admin.
     * @deny (get) - If the user is not an admin.
     * @principle Enforces admin-only access for content management.
     */
    match /philanthropic_activities/{philanthropicActivityId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages user profile access, allowing users to only access their own data.
     * @path /users/{userId}
     * @allow (get, update, delete) - If the user is the owner of the profile.
     * @allow (create) - If the user is creating their own profile.
     * @deny (get, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}